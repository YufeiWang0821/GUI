# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\D\工作\项目演示\Wear Leveling UI\wear leveling.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import paramiko  # 用于远程连接
import os
import sys

class connect_ssh:

    def __init__(self):
        jumpbox_host_ip = "222.20.98.67"  # 跳板机
        ssh_user = "wangyufei"
        ssh_key_filename = 'C:/Users/JJ/.ssh/id_rsa'
        target_host_ip = '192.168.33.2'  # 目的服务器
        print(ssh_key_filename)

        print("connecting to the jump host")
        # 创建一个实例化
        jumpbox_ssh = paramiko.SSHClient()
        # 自动添加策略，保存远端主机的主机名和密钥信息，如果不添加，那么不在本地knows_hosts文件中记录的主机将无法连接，默认拒接
        jumpbox_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        # 连接跳板机
        jumpbox_ssh.connect(hostname=jumpbox_host_ip,port=5088, username=ssh_user, key_filename=ssh_key_filename)
        print("\n** connected jumpbox! **")

        print("\nopening a tunnel for connecting router host")
        # 创建一个中间连接的通道
        jumpbox_transport = jumpbox_ssh.get_transport()
        src_addr = (jumpbox_host_ip, 5088)
        dest_addr = (target_host_ip, 5011)
        jumpbox_channel = jumpbox_transport.open_channel(kind="direct-tcpip", dest_addr=dest_addr, src_addr=src_addr, )
        print("\n** opened a tunnel! **")

        print("\nconnecting a router host")
        # 去连接远端服务器
        target_ssh = paramiko.SSHClient()
        target_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        target_ssh.connect(hostname=target_host_ip,port=5011, username=ssh_user, key_filename=ssh_key_filename,
                              sock=jumpbox_channel)
        print("\n** connected to the destination host! **")
		# 创建一个SFTP客户端通道
        trans = target_ssh.get_transport()
        sftp = paramiko.SFTPClient.from_transport(trans)
        print(sftp)

        self.target_ssh = target_ssh
        self.sftp = sftp
    
    def execute(self, cmd):    
        # 在执行命令前，先激活 conda 环境
        conda_activate_cmd = "source ~/miniconda3/etc/profile.d/conda.sh && conda activate visual && " + cmd
        stdin, stdout, stderr = self.target_ssh.exec_command(conda_activate_cmd)
        result = stdout.read().decode()
        error = stderr.read().decode()

        if result:
            print(f"Command output: {result}")
        if error:
            print(f"Command error: {error}")

        return result
  

    def close(self):    
        self.target_ssh.close()
        self.jumpbox_ssh.close()
        self.sftp.close()
        print("Closed!")

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(658, 583)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(100, 70, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(270, 30, 96, 12))
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setScaledContents(False)
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 100, 211, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 130, 211, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(20, 190, 271, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setGeometry(QtCore.QRect(350, 70, 291, 111))
        self.textEdit.setObjectName("textEdit")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(70, 230, 141, 20))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(390, 230, 131, 16))
        self.label_3.setObjectName("label_3")

        # 设置按钮的点击事件
        self.pushButton.clicked.connect(self.run_remote_script)  # 连接按钮的点击事件到 run_remote_script 函数
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "连接服务器"))
        self.label.setText(_translate("Form", "磨损均衡结果展示"))
        self.pushButton_2.setText(_translate("Form", "处理原始运行结果并绘制热力图"))
        self.pushButton_3.setText(_translate("Form", "处理原始运行结果并绘制小提琴图"))
        self.pushButton_4.setText(_translate("Form", "未使用磨损均衡与使用磨损均衡的情况对比"))
        self.label_2.setText(_translate("Form", "未使用磨损均衡结果图"))
        self.label_3.setText(_translate("Form", "使用了磨损均衡结果图"))

    def run_remote_script(self):
        sever=connect_ssh()
        # sever.execute('python /home/wangyufei/wear_leveling_visualization/wL_UI/heatmap.py')
        # sever.close()
