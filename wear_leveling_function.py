# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\D\工作\项目演示\Wear Leveling UI\wear leveling.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import paramiko  # 用于远程连接
import os
import sys
import subprocess

class TextEditPrinter:
    def __init__(self, text_edit):
        self.text_edit = text_edit

    def write(self, message):
        # 将输出添加到 QTextEdit 中
        self.text_edit.append(message)

    def flush(self):  # 确保print调用时不丢失数据
        pass

class connect_ssh:

    def __init__(self,text_edit=None):
        self.text_printer = TextEditPrinter(text_edit)
        sys.stdout = self.text_printer  # 重定向 print 输出

        jumpbox_host_ip = "222.20.98.67"  # 跳板机
        ssh_user = "wangyufei"
        ssh_key_filename = 'id_rsa'
        target_host_ip = '192.168.33.2'  # 目的服务器
        #print(ssh_key_filename)

        #print("connecting to the jump host")
        # 创建一个实例化
        jumpbox_ssh = paramiko.SSHClient()
        # 自动添加策略，保存远端主机的主机名和密钥信息，如果不添加，那么不在本地knows_hosts文件中记录的主机将无法连接，默认拒接
        jumpbox_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        # 连接跳板机
        jumpbox_ssh.connect(hostname=jumpbox_host_ip,port=5088, username=ssh_user, key_filename=ssh_key_filename)
        #print("\n** connected jumpbox! **")

        #print("\nopening a tunnel for connecting router host")
        # 创建一个中间连接的通道
        jumpbox_transport = jumpbox_ssh.get_transport()
        src_addr = (jumpbox_host_ip, 5088)
        dest_addr = (target_host_ip, 5011)
        jumpbox_channel = jumpbox_transport.open_channel(kind="direct-tcpip", dest_addr=dest_addr, src_addr=src_addr, )
        #print("\n** opened a tunnel! **")

        #print("\nconnecting a router host")
        # 去连接远端服务器
        target_ssh = paramiko.SSHClient()
        target_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        target_ssh.connect(hostname=target_host_ip,port=5011, username=ssh_user, key_filename=ssh_key_filename,
                              sock=jumpbox_channel)
        print("** connected to the destination host! **")
		# 创建一个SFTP客户端通道
        trans = target_ssh.get_transport()
        sftp = paramiko.SFTPClient.from_transport(trans)
        #print(sftp)

        self.target_ssh = target_ssh
        self.sftp = sftp
        self.text_edit = text_edit  # 将 QTextEdit 传递进来
    
    def execute(self, cmd):
        # 在执行命令前，先激活 conda 环境
        conda_activate_cmd = "source ~/miniconda3/etc/profile.d/conda.sh && conda activate visual && " + cmd
        stdin, stdout, stderr = self.target_ssh.exec_command(conda_activate_cmd)

        # 实时显示标准输出
        while True:
            # 从标准输出逐行读取数据
            result = stdout.readline()
            if result:
                print(result.strip())  # 输出到 QTextEdit
            else:
                break  # 如果没有更多输出，则停止

        # # 实时显示标准错误（如果有）
        # while True:
        #     error = stderr.readline()
        #     if error:
        #         print(error.strip())  # 输出到 QTextEdit
        #     else:
        #         break  # 如果没有更多错误输出，则停止
  

    def close(self):    
        self.target_ssh.close()
        self.jumpbox_ssh.close()
        self.sftp.close()
        print("Closed!")

class Ui_WearLeveling(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1500, 1200)
        Form.setStyleSheet("background-color: #f5f5f5;")  # 设置背景色为浅灰色
        Form.setMinimumSize(QtCore.QSize(1000, 800))
        Form.setMaximumSize(QtCore.QSize(1500, 1500))

        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)  # 增加标题字体大小
        font.setBold(True)

        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(500, 20, 300, 50))
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setScaledContents(False)
        self.label.setObjectName("label")
        self.label.setFont(font)
        self.label.setStyleSheet("color: #333333;")  # 标题颜色为深灰色


        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setFont(font)
        self.pushButton.setGeometry(QtCore.QRect(250, 90, 300, 60))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet(
            """
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border-radius: 8px;
                padding: 10px 20px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            """
        )

        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 1060, 750, 60))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setStyleSheet(
            """
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border-radius: 8px;
                padding: 10px 20px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            """
        )

        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 1140, 750, 60))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setStyleSheet(
            """
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border-radius: 8px;
                padding: 10px 20px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            """
        )

        self.pushButton_5 = QtWidgets.QPushButton(Form)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 170, 750, 60))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.setStyleSheet(
            """
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border-radius: 8px;
                padding: 10px 20px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            """
        )       

        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 250, 750, 60))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setStyleSheet(
            """
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border-radius: 8px;
                padding: 10px 20px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            """
        )

        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setGeometry(QtCore.QRect(800, 90, 600, 300))
        self.textEdit.setObjectName("textEdit")

        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(150, 400, 400, 50))
        self.label_2.setObjectName("label_2")
        self.label_2.setTextFormat(QtCore.Qt.AutoText)
        self.label_2.setScaledContents(False)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: #333333;")  # 标题颜色为深灰色

        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(850, 400, 400, 50))
        self.label_3.setObjectName("label_3")
        self.label_3.setTextFormat(QtCore.Qt.AutoText)
        self.label_3.setScaledContents(False)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: #333333;")  # 标题颜色为深灰色


        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(110, 500, 300, 300))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(870, 500, 300, 300))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(30, 850, 500, 200))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(750, 850, 500, 200))
        self.label_7.setObjectName("label_7")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # 设置按钮的点击事件
        self.pushButton.clicked.connect(self.connect)  # 连接按钮的点击事件
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.pushButton_2.clicked.connect(self.run_generate_heatmap)  # 连接按钮的点击事件
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.pushButton_3.clicked.connect(self.run_generate_violin)  # 连接按钮的点击事件
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.pushButton_4.clicked.connect(self.show_gif)  # 连接按钮的点击事件
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.pushButton_5.clicked.connect(self.download_folder)  # 连接按钮的点击事件
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)            



    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "连接服务器"))
        self.label.setText(_translate("Form", "磨损均衡结果展示"))
        self.pushButton_2.setText(_translate("Form", "处理原始运行结果并绘制热力图"))
        self.pushButton_3.setText(_translate("Form", "处理原始运行结果并绘制小提琴图"))
        self.pushButton_4.setText(_translate("Form", "未使用磨损均衡与使用磨损均衡的情况对比"))
        self.label_2.setText(_translate("Form", "未使用磨损均衡结果图"))
        self.label_3.setText(_translate("Form", "使用了磨损均衡结果图"))
        # self.label_4.setText(_translate("Form", "展示区域"))
        # self.label_5.setText(_translate("Form", "展示区域"))
        self.pushButton_5.setText(_translate("Form", "从服务器获取分析结果图"))

    def connect(self):
        self.sever=connect_ssh(self.textEdit)
        # sever.execute('python /home/wangyufei/wear_leveling_visualization/wL_UI/heatmap.py')
        # sever.close()
    def run_generate_heatmap(self):
        self.sever.execute('python /home/wangyufei/wear_leveling_visualization/wL_UI/heatmap.py')
        self.sever.execute('python /home/wangyufei/wear_leveling_visualization/wL_UI/heatmap_gif.py')
    def run_generate_violin(self):
        self.sever.execute('python /home/wangyufei/wear_leveling_visualization/wL_UI/violin_plot_250.py')
        self.sever.execute('python /home/wangyufei/wear_leveling_visualization/wL_UI/violin_gif.py')
        # self.text_edit.append('动图绘制完成')
      
    def show_gif(self):
        # 获取当前目录下的gif文件
        gif_path1 = "./gifs/heatmap_nowl.gif"  # 假设 GIF 文件在当前目录下
        gif_path2 = "./gifs/heatmap_wl.gif"
        gif_path3 = "./gifs/violin_nowl.gif"
        gif_path4 = "./gifs/violin_wl.gif"
        # 创建一个 QMovie 对象来加载 GIF
        movie1 = QtGui.QMovie(gif_path1)
        movie2 = QtGui.QMovie(gif_path2)
        movie3 = QtGui.QMovie(gif_path3)
        movie4 = QtGui.QMovie(gif_path4)
        # 设置 GIF 缩放后的大小，例如设置为 200x200
        movie1.setScaledSize(QtCore.QSize(300, 300))
        movie2.setScaledSize(QtCore.QSize(300, 300))
        movie3.setScaledSize(QtCore.QSize(500, 200))
        movie4.setScaledSize(QtCore.QSize(500, 200))
        # 将 QMovie 设置为 QLabel 的动画
        self.label_4.setMovie(movie1)
        self.label_5.setMovie(movie2)
        self.label_6.setMovie(movie3)
        self.label_7.setMovie(movie4)
        # 启动 GIF 播放
        movie1.start()
        movie2.start()
        movie3.start()
        movie4.start()
    
    # def download_folder(self):
    #     # 定义SCP命令，使用 -r 递归下载整个文件夹
    #     scp_command = [
    #         "scp",
    #         "-r",  # 递归下载
    #         "wangyufei@GPU01:/home/wangyufei/wear_leveling_visualization/wL_UI/gifs/",  # 远程文件夹路径
    #         "./"  # 将文件下载到当前目录
    #     ]

    #     # 执行命令
    #     try:
    #         result = subprocess.run(scp_command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    #         self.textEdit.append("文件夹传输成功。")
    #         #self.textEdit.append("标准输出: " + result.stdout)
    #     except subprocess.CalledProcessError as e:
    #         self.textEdit.append("SCP 文件夹传输出错：")
    #         self.textEdit.append("标准错误: " + e.stderr)

    def download_folder(self):
        # 定义远程文件夹路径和本地目标文件夹路径
        remote_folder_path = "/home/wangyufei/wear_leveling_visualization/wL_UI/gifs/"
        local_folder_path = "./gifs/"

        # 确保本地文件夹存在，如果不存在则创建
        if not os.path.exists(local_folder_path):
            os.makedirs(local_folder_path)

        # 使用已连接的 SSH 客户端打开 SFTP 通道
        sftp = self.sever.sftp

        try:
            # 获取远程文件夹内的文件列表
            remote_files = sftp.listdir(remote_folder_path)

            # 遍历文件列表，下载每个文件
            for filename in remote_files:
                remote_file_path = os.path.join(remote_folder_path, filename)
                local_file_path = os.path.join(local_folder_path, filename)

                # 下载文件
                sftp.get(remote_file_path, local_file_path)
                #self.textEdit.append(f"下载文件 {filename} 成功")
            self.textEdit.append(f"获取成功")

        except Exception as e:
            self.textEdit.append(f"文件传输失败: {str(e)}")

        finally:
            # 关闭 SFTP 客户端
            sftp.close()


